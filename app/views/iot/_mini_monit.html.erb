<div class="accordion-item">

  <button class="accordion-button collapsed d-flex" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne<%= device.id %>" aria-expanded="false" aria-controls="collapseOne<%= device.id %>">
    <span class="me-auto" id="nomeDevice<%= device.id %>">
      <%= device.description %> - <%= device.versao %>
    </span>
    <div  class="ms-auto" style="background-color: #FA8072;" id="acti<%= device.id %>">
      Offline
    </div>
  </button>

  <div id="collapseOne<%= device.id %>" class="accordion-collapse collapse <%= @show %>" aria-labelledby="flush-headingOne" data-bs-parent="#list_devices_accordion">

    <div class="accordion-body">

      <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="control-tab<%= device.id %>" data-bs-toggle="tab" data-bs-target="#control<%= device.id %>" type="button" role="tab" aria-controls="control<%= device.id %>" aria-selected="true">Home</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="profile-tab<%= device.id %>" data-bs-toggle="tab" data-bs-target="#profile<%= device.id %>" type="button" role="tab" aria-controls="profile<%= device.id %>" aria-selected="false">Configs</button>
        </li>
      </ul>


      <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="control<%= device.id %>" role="tabpanel" aria-labelledby="control-tab<%= device.id %>">
          <% ch = object_of_channels(channels) %>
          <div style="border: 1px solid lightblue; border-radius: 10px;">
            <div class="row text-center d-flex align-items-center justify-content-center" style="height: 100%; margin-botton: 15px;">
              <br>
              <div class="col">
                <%= render 'components/value', device: device, value: ch['value'] %>
                <% vcc = ch['value'] %>
                <button type="button" class="btn btn-link" 
                  onclick="get_chart('<%= device.id %>', '<%= vcc.path %>', 'chart_<%= vcc.device_id %>')" >
                  <%= image_tag "linha.png", style: "width: 30%;" %>
                </button>
                
              </div>
              <div class="col">
                <%= render 'components/led', device: device, led: ch['led1'] %>
              </div>
              <div class="col">
                <%= render 'components/led', device: device, led: ch['led2'] %>
              </div>
            </div>
          </div>
          <div>
            <canvas style="display: none;" id="chart_<%= device.id %>"></canvas>
            <button style="display: none;" id="hide_chart_<%= device.id %>" class="btn btn-sm btn-outline-info" onclick="hide_chart()">Ocultar gráfico</button>
          </div>
          <div>
            <%= render 'components/terminal_view', device: device, terminal: ch['terminal_view'] %>
            <%= render 'components/mini_monit/terminal_insert', device: device, terminal: ch['terminal_insert'] %>
            <%= render 'components/mini_monit/info', device: device, info: ch['info'], reset: ch['reiniciar'], vcc: ch['value'] %>
          </div>
        </div>
        <div class="tab-pane fade" id="profile<%= device.id %>" role="tabpanel" aria-labelledby="profile-tab<%= device.id %>">
          <%= render 'components/mini_monit/configs', device: device, prefes_insert: ch['prefes_insert'] %>
        </div>
      </div>


    </div>
  </div>
</div>

<script>
  var chartInstances = {}

  function hide_chart(){
    const chart = document.getElementById('chart_<%= device.id %>')
    const hide_chart = document.getElementById('hide_chart_<%= device.id %>')
    chart.style.display = "none"
    hide_chart.style.display = "none"
  }

  function convertDate(str) {
    let [date, time] = str.split(', ')
    let [day, month, year] = date.split('/')
    let [hour, minute, second] = time.split(':')
    return `${hour}:${minute}`
  }

  function create_chart(device_id, chart_id, times, values){
    const hide_chart = document.getElementById(`hide_chart_${device_id}`)
    const ctx = document.getElementById(chart_id)
    ctx.style.display = "block"
    hide_chart.style.display = "block"

    if (chartInstances[device_id] != undefined) {
      chartInstances[device_id].destroy();
    }

    chartInstances[device_id] = new Chart(ctx, {
      type: 'line',
      data: {
        labels: times,
        datasets: [{
          label: 'Tensão Dc',
          data: values,
          borderWidth: 1,
          tension: 0.8
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    })
  }

  function get_chart(device_id, path, chart_id){
    const dados = { param1: 'chart', param2: path }
    const csrfToken = document.querySelector('meta[name="csrf-token"]').content

    fetch('/others', { method: 'POST', headers: { 'Content-Type': 'application/json', 'X-CSRF-Token': csrfToken }, body: JSON.stringify(dados) })
      .then(response => response.json())
      .then(dt => {
        if (dt.error == false) {
          let array = JSON.parse(dt.data)
          const times = array.map(obj => convertDate(obj.time))
          const values = array.map(obj => parseFloat(obj.value))
          create_chart(device_id, chart_id, times, values)
        }else {
          console.log(dt)
          $.notify(dt.message, "error")
        }
      })
      .catch(error => console.error('Erro ao fazer fetch:', error))
  }
</script>